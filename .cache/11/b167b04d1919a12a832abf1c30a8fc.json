{"id":"node_modules/libp2p/src/identify/message.js","dependencies":[{"name":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/package.json","includedInParent":true,"mtime":1583765270259},{"name":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/libp2p/package.json","includedInParent":true,"mtime":1581947167834},{"name":"protons","loc":{"line":3,"column":24},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/libp2p/src/identify/message.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/libp2p/node_modules/protons/src/index.js"}],"generated":{"js":"'use strict';\n\nconst protons = require('protons');\n\nconst schema = `\nmessage Identify {\n  // protocolVersion determines compatibility between peers\n  optional string protocolVersion = 5; // e.g. ipfs/1.0.0\n\n  // agentVersion is like a UserAgent string in browsers, or client version in bittorrent\n  // includes the client name and client.\n  optional string agentVersion = 6; // e.g. go-ipfs/0.1.0\n\n  // publicKey is this node's public key (which also gives its node.ID)\n  // - may not need to be sent, as secure channel implies it has been sent.\n  // - then again, if we change / disable secure channel, may still want it.\n  optional bytes publicKey = 1;\n\n  // listenAddrs are the multiaddrs the sender node listens for open connections on\n  repeated bytes listenAddrs = 2;\n\n  // oservedAddr is the multiaddr of the remote endpoint that the sender node perceives\n  // this is useful information to convey to the other side, as it helps the remote endpoint\n  // determine whether its connection to the local peer goes through NAT.\n  optional bytes observedAddr = 4;\n\n  repeated string protocols = 3;\n}\n`;\nmodule.exports = protons(schema).Identify;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":3,"column":0}},{"name":"protons","generated":{"line":3,"column":6},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":3,"column":6}},{"generated":{"line":3,"column":13},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":3,"column":13}},{"name":"require","generated":{"line":3,"column":16},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":3,"column":16}},{"generated":{"line":3,"column":23},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":3,"column":23}},{"generated":{"line":3,"column":24},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":3,"column":24}},{"generated":{"line":3,"column":33},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":3,"column":23}},{"generated":{"line":3,"column":34},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":0},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":4,"column":0}},{"name":"schema","generated":{"line":5,"column":6},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":4,"column":6}},{"generated":{"line":5,"column":12},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":4,"column":12}},{"generated":{"line":5,"column":15},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":4,"column":16}},{"generated":{"line":29,"column":1},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":4,"column":0}},{"name":"module","generated":{"line":30,"column":0},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":0}},{"generated":{"line":30,"column":6},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":6}},{"name":"exports","generated":{"line":30,"column":7},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":7}},{"generated":{"line":30,"column":14},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":0}},{"name":"protons","generated":{"line":30,"column":17},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":17}},{"generated":{"line":30,"column":24},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":24}},{"name":"schema","generated":{"line":30,"column":25},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":25}},{"generated":{"line":30,"column":31},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":24}},{"generated":{"line":30,"column":32},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":17}},{"name":"Identify","generated":{"line":30,"column":33},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":33}},{"generated":{"line":30,"column":41},"source":"node_modules/libp2p/src/identify/message.js","original":{"line":30,"column":0}}],"sources":{"node_modules/libp2p/src/identify/message.js":"'use strict'\n\nconst protons = require('protons')\nconst schema = `\nmessage Identify {\n  // protocolVersion determines compatibility between peers\n  optional string protocolVersion = 5; // e.g. ipfs/1.0.0\n\n  // agentVersion is like a UserAgent string in browsers, or client version in bittorrent\n  // includes the client name and client.\n  optional string agentVersion = 6; // e.g. go-ipfs/0.1.0\n\n  // publicKey is this node's public key (which also gives its node.ID)\n  // - may not need to be sent, as secure channel implies it has been sent.\n  // - then again, if we change / disable secure channel, may still want it.\n  optional bytes publicKey = 1;\n\n  // listenAddrs are the multiaddrs the sender node listens for open connections on\n  repeated bytes listenAddrs = 2;\n\n  // oservedAddr is the multiaddr of the remote endpoint that the sender node perceives\n  // this is useful information to convey to the other side, as it helps the remote endpoint\n  // determine whether its connection to the local peer goes through NAT.\n  optional bytes observedAddr = 4;\n\n  repeated string protocols = 3;\n}\n`\n\nmodule.exports = protons(schema).Identify\n"},"lineCount":null}},"error":null,"hash":"f3f301a476d2aa7003399412cd7f736a","cacheData":{"env":{}}}