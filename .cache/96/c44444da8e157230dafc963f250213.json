{"id":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","dependencies":[{"name":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/package.json","includedInParent":true,"mtime":1583765270259},{"name":"/home/hamster/Learning/Node.js/js-libp2p/node_modules/libp2p-interfaces/package.json","includedInParent":true,"mtime":1581949153096},{"name":"assert","loc":{"line":3,"column":23},"parent":"/home/hamster/Learning/Node.js/js-libp2p/node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/assert/assert.js"},{"name":"class-is","loc":{"line":4,"column":23},"parent":"/home/hamster/Learning/Node.js/js-libp2p/node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/node_modules/class-is/index.js"},{"name":"./index","loc":{"line":6,"column":25},"parent":"/home/hamster/Learning/Node.js/js-libp2p/node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/node_modules/libp2p-interfaces/src/topology/index.js"}],"generated":{"js":"'use strict'\n\nconst assert = require('assert')\nconst withIs = require('class-is')\n\nconst Topology = require('./index')\n\nclass MulticodecTopology extends Topology {\n  /**\n   * @param {Object} props\n   * @param {number} props.min minimum needed connections (default: 0)\n   * @param {number} props.max maximum needed connections (default: Infinity)\n   * @param {Array<string>} props.multicodecs protocol multicodecs\n   * @param {Object} props.handlers\n   * @param {function} props.handlers.onConnect protocol \"onConnect\" handler\n   * @param {function} props.handlers.onDisconnect protocol \"onDisconnect\" handler\n   * @constructor\n   */\n  constructor ({\n    min,\n    max,\n    multicodecs,\n    handlers\n  }) {\n    super({ min, max, handlers })\n\n    assert(multicodecs, 'one or more multicodec should be provided')\n    assert(handlers, 'the handlers should be provided')\n    assert(handlers.onConnect && typeof handlers.onConnect === 'function',\n      'the \\'onConnect\\' handler must be provided')\n    assert(handlers.onDisconnect && typeof handlers.onDisconnect === 'function',\n      'the \\'onDisconnect\\' handler must be provided')\n\n    this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs]\n    this._registrar = undefined\n\n    this._onProtocolChange = this._onProtocolChange.bind(this)\n  }\n\n  set registrar (registrar) {\n    this._registrar = registrar\n    this._registrar.peerStore.on('change:protocols', this._onProtocolChange)\n\n    // Update topology peers\n    this._updatePeers(this._registrar.peerStore.peers.values())\n  }\n\n  /**\n   * Update topology.\n   * @param {Array<PeerInfo>} peerInfoIterable\n   * @returns {void}\n   */\n  _updatePeers (peerInfoIterable) {\n    for (const peerInfo of peerInfoIterable) {\n      if (this.multicodecs.filter(multicodec => peerInfo.protocols.has(multicodec)).length) {\n        // Add the peer regardless of whether or not there is currently a connection\n        this.peers.set(peerInfo.id.toB58String(), peerInfo)\n        // If there is a connection, call _onConnect\n        const connection = this._registrar.getConnection(peerInfo)\n        connection && this._onConnect(peerInfo, connection)\n      } else {\n        // Remove any peers we might be tracking that are no longer of value to us\n        this.peers.delete(peerInfo.id.toB58String())\n      }\n    }\n  }\n\n  /**\n   * Check if a new peer support the multicodecs for this topology.\n   * @param {Object} props\n   * @param {PeerInfo} props.peerInfo\n   * @param {Array<string>} props.protocols\n   */\n  _onProtocolChange ({ peerInfo, protocols }) {\n    const existingPeer = this.peers.get(peerInfo.id.toB58String())\n    const hasProtocol = protocols.filter(protocol => this.multicodecs.includes(protocol))\n\n    // Not supporting the protocol anymore?\n    if (existingPeer && hasProtocol.length === 0) {\n      this._onDisconnect(peerInfo)\n    }\n\n    // New to protocol support\n    for (const protocol of protocols) {\n      if (this.multicodecs.includes(protocol)) {\n        this._updatePeers([peerInfo])\n        return\n      }\n    }\n  }\n}\n\nmodule.exports = withIs(MulticodecTopology, { className: 'MulticodecTopology', symbolName: '@libp2p/js-interfaces/topology/multicodec-topology' })\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}}],"sources":{"../../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js":"'use strict'\n\nconst assert = require('assert')\nconst withIs = require('class-is')\n\nconst Topology = require('./index')\n\nclass MulticodecTopology extends Topology {\n  /**\n   * @param {Object} props\n   * @param {number} props.min minimum needed connections (default: 0)\n   * @param {number} props.max maximum needed connections (default: Infinity)\n   * @param {Array<string>} props.multicodecs protocol multicodecs\n   * @param {Object} props.handlers\n   * @param {function} props.handlers.onConnect protocol \"onConnect\" handler\n   * @param {function} props.handlers.onDisconnect protocol \"onDisconnect\" handler\n   * @constructor\n   */\n  constructor ({\n    min,\n    max,\n    multicodecs,\n    handlers\n  }) {\n    super({ min, max, handlers })\n\n    assert(multicodecs, 'one or more multicodec should be provided')\n    assert(handlers, 'the handlers should be provided')\n    assert(handlers.onConnect && typeof handlers.onConnect === 'function',\n      'the \\'onConnect\\' handler must be provided')\n    assert(handlers.onDisconnect && typeof handlers.onDisconnect === 'function',\n      'the \\'onDisconnect\\' handler must be provided')\n\n    this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs]\n    this._registrar = undefined\n\n    this._onProtocolChange = this._onProtocolChange.bind(this)\n  }\n\n  set registrar (registrar) {\n    this._registrar = registrar\n    this._registrar.peerStore.on('change:protocols', this._onProtocolChange)\n\n    // Update topology peers\n    this._updatePeers(this._registrar.peerStore.peers.values())\n  }\n\n  /**\n   * Update topology.\n   * @param {Array<PeerInfo>} peerInfoIterable\n   * @returns {void}\n   */\n  _updatePeers (peerInfoIterable) {\n    for (const peerInfo of peerInfoIterable) {\n      if (this.multicodecs.filter(multicodec => peerInfo.protocols.has(multicodec)).length) {\n        // Add the peer regardless of whether or not there is currently a connection\n        this.peers.set(peerInfo.id.toB58String(), peerInfo)\n        // If there is a connection, call _onConnect\n        const connection = this._registrar.getConnection(peerInfo)\n        connection && this._onConnect(peerInfo, connection)\n      } else {\n        // Remove any peers we might be tracking that are no longer of value to us\n        this.peers.delete(peerInfo.id.toB58String())\n      }\n    }\n  }\n\n  /**\n   * Check if a new peer support the multicodecs for this topology.\n   * @param {Object} props\n   * @param {PeerInfo} props.peerInfo\n   * @param {Array<string>} props.protocols\n   */\n  _onProtocolChange ({ peerInfo, protocols }) {\n    const existingPeer = this.peers.get(peerInfo.id.toB58String())\n    const hasProtocol = protocols.filter(protocol => this.multicodecs.includes(protocol))\n\n    // Not supporting the protocol anymore?\n    if (existingPeer && hasProtocol.length === 0) {\n      this._onDisconnect(peerInfo)\n    }\n\n    // New to protocol support\n    for (const protocol of protocols) {\n      if (this.multicodecs.includes(protocol)) {\n        this._updatePeers([peerInfo])\n        return\n      }\n    }\n  }\n}\n\nmodule.exports = withIs(MulticodecTopology, { className: 'MulticodecTopology', symbolName: '@libp2p/js-interfaces/topology/multicodec-topology' })\n"},"lineCount":94}},"error":null,"hash":"3757da7b4bcab418a4bb5f5c52ef359c","cacheData":{"env":{}}}