{"id":"node_modules/yargs/lib/command.js","dependencies":[{"name":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/package.json","includedInParent":true,"mtime":1583765270259},{"name":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs/package.json","includedInParent":true,"mtime":1581949149688},{"name":"util","loc":{"line":3,"column":24},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs/lib/command.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/util/util.js"},{"name":"./is-promise","loc":{"line":4,"column":26},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs/lib/command.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs/lib/is-promise.js"},{"name":"./middleware","loc":{"line":5,"column":62},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs/lib/command.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs/lib/middleware.js"},{"name":"path","loc":{"line":6,"column":21},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs/lib/command.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/path-browserify/index.js"},{"name":"yargs-parser","loc":{"line":7,"column":23},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs/lib/command.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs-parser/index.js"},{"name":"require-directory","loc":{"line":112,"column":12},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs/lib/command.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/require-directory/index.js"},{"name":"which-module","loc":{"line":118,"column":24},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/yargs/lib/command.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/which-module/index.js"}],"generated":{"js":"'use strict'\n\nconst inspect = require('util').inspect\nconst isPromise = require('./is-promise')\nconst { applyMiddleware, commandMiddlewareFactory } = require('./middleware')\nconst path = require('path')\nconst Parser = require('yargs-parser')\n\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/\n\n// handles parsing positional arguments,\n// and populating argv with said positional\n// arguments.\nmodule.exports = function command (yargs, usage, validation, globalMiddleware) {\n  const self = {}\n  let handlers = {}\n  let aliasMap = {}\n  let defaultCommand\n  globalMiddleware = globalMiddleware || []\n\n  self.addHandler = function addHandler (cmd, description, builder, handler, commandMiddleware) {\n    let aliases = []\n    const middlewares = commandMiddlewareFactory(commandMiddleware)\n    handler = handler || (() => {})\n\n    if (Array.isArray(cmd)) {\n      aliases = cmd.slice(1)\n      cmd = cmd[0]\n    } else if (typeof cmd === 'object') {\n      let command = (Array.isArray(cmd.command) || typeof cmd.command === 'string') ? cmd.command : moduleName(cmd)\n      if (cmd.aliases) command = [].concat(command).concat(cmd.aliases)\n      self.addHandler(command, extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares)\n      return\n    }\n\n    // allow a module to be provided instead of separate builder and handler\n    if (typeof builder === 'object' && builder.builder && typeof builder.handler === 'function') {\n      self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares)\n      return\n    }\n\n    // parse positionals out of cmd string\n    const parsedCommand = self.parseCommand(cmd)\n\n    // remove positional args from aliases only\n    aliases = aliases.map(alias => self.parseCommand(alias).cmd)\n\n    // check for default and filter out '*''\n    let isDefault = false\n    const parsedAliases = [parsedCommand.cmd].concat(aliases).filter((c) => {\n      if (DEFAULT_MARKER.test(c)) {\n        isDefault = true\n        return false\n      }\n      return true\n    })\n\n    // standardize on $0 for default command.\n    if (parsedAliases.length === 0 && isDefault) parsedAliases.push('$0')\n\n    // shift cmd and aliases after filtering out '*'\n    if (isDefault) {\n      parsedCommand.cmd = parsedAliases[0]\n      aliases = parsedAliases.slice(1)\n      cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd)\n    }\n\n    // populate aliasMap\n    aliases.forEach((alias) => {\n      aliasMap[alias] = parsedCommand.cmd\n    })\n\n    if (description !== false) {\n      usage.command(cmd, description, isDefault, aliases)\n    }\n\n    handlers[parsedCommand.cmd] = {\n      original: cmd,\n      description: description,\n      handler,\n      builder: builder || {},\n      middlewares: middlewares || [],\n      demanded: parsedCommand.demanded,\n      optional: parsedCommand.optional\n    }\n\n    if (isDefault) defaultCommand = handlers[parsedCommand.cmd]\n  }\n\n  self.addDirectory = function addDirectory (dir, context, req, callerFile, opts) {\n    opts = opts || {}\n    // disable recursion to support nested directories of subcommands\n    if (typeof opts.recurse !== 'boolean') opts.recurse = false\n    // exclude 'json', 'coffee' from require-directory defaults\n    if (!Array.isArray(opts.extensions)) opts.extensions = ['js']\n    // allow consumer to define their own visitor function\n    const parentVisit = typeof opts.visit === 'function' ? opts.visit : o => o\n    // call addHandler via visitor function\n    opts.visit = function visit (obj, joined, filename) {\n      const visited = parentVisit(obj, joined, filename)\n      // allow consumer to skip modules with their own visitor\n      if (visited) {\n        // check for cyclic reference\n        // each command file path should only be seen once per execution\n        if (~context.files.indexOf(joined)) return visited\n        // keep track of visited files in context.files\n        context.files.push(joined)\n        self.addHandler(visited)\n      }\n      return visited\n    }\n    require('require-directory')({ require: req, filename: callerFile }, dir, opts)\n  }\n\n  // lookup module object from require()d command and derive name\n  // if module was not require()d and no name given, throw error\n  function moduleName (obj) {\n    const mod = require('which-module')(obj)\n    if (!mod) throw new Error(`No command name given for module: ${inspect(obj)}`)\n    return commandFromFilename(mod.filename)\n  }\n\n  // derive command name from filename\n  function commandFromFilename (filename) {\n    return path.basename(filename, path.extname(filename))\n  }\n\n  function extractDesc (obj) {\n    for (let keys = ['describe', 'description', 'desc'], i = 0, l = keys.length, test; i < l; i++) {\n      test = obj[keys[i]]\n      if (typeof test === 'string' || typeof test === 'boolean') return test\n    }\n    return false\n  }\n\n  self.parseCommand = function parseCommand (cmd) {\n    const extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ')\n    const splitCommand = extraSpacesStrippedCommand.split(/\\s+(?![^[]*]|[^<]*>)/)\n    const bregex = /\\.*[\\][<>]/g\n    const parsedCommand = {\n      cmd: (splitCommand.shift()).replace(bregex, ''),\n      demanded: [],\n      optional: []\n    }\n    splitCommand.forEach((cmd, i) => {\n      let variadic = false\n      cmd = cmd.replace(/\\s/g, '')\n      if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1) variadic = true\n      if (/^\\[/.test(cmd)) {\n        parsedCommand.optional.push({\n          cmd: cmd.replace(bregex, '').split('|'),\n          variadic\n        })\n      } else {\n        parsedCommand.demanded.push({\n          cmd: cmd.replace(bregex, '').split('|'),\n          variadic\n        })\n      }\n    })\n    return parsedCommand\n  }\n\n  self.getCommands = () => Object.keys(handlers).concat(Object.keys(aliasMap))\n\n  self.getCommandHandlers = () => handlers\n\n  self.hasDefaultCommand = () => !!defaultCommand\n\n  self.runCommand = function runCommand (command, yargs, parsed, commandIndex) {\n    let aliases = parsed.aliases\n    const commandHandler = handlers[command] || handlers[aliasMap[command]] || defaultCommand\n    const currentContext = yargs.getContext()\n    let numFiles = currentContext.files.length\n    const parentCommands = currentContext.commands.slice()\n\n    // what does yargs look like after the builder is run?\n    let innerArgv = parsed.argv\n    let innerYargs = null\n    let positionalMap = {}\n    if (command) {\n      currentContext.commands.push(command)\n      currentContext.fullCommands.push(commandHandler.original)\n    }\n    if (typeof commandHandler.builder === 'function') {\n      // a function can be provided, which builds\n      // up a yargs chain and possibly returns it.\n      innerYargs = commandHandler.builder(yargs.reset(parsed.aliases))\n      if (!innerYargs || (typeof innerYargs._parseArgs !== 'function')) {\n        innerYargs = yargs\n      }\n      if (shouldUpdateUsage(innerYargs)) {\n        innerYargs.getUsageInstance().usage(\n          usageFromParentCommandsCommandHandler(parentCommands, commandHandler),\n          commandHandler.description\n        )\n      }\n      innerArgv = innerYargs._parseArgs(null, null, true, commandIndex)\n      aliases = innerYargs.parsed.aliases\n    } else if (typeof commandHandler.builder === 'object') {\n      // as a short hand, an object can instead be provided, specifying\n      // the options that a command takes.\n      innerYargs = yargs.reset(parsed.aliases)\n      if (shouldUpdateUsage(innerYargs)) {\n        innerYargs.getUsageInstance().usage(\n          usageFromParentCommandsCommandHandler(parentCommands, commandHandler),\n          commandHandler.description\n        )\n      }\n      Object.keys(commandHandler.builder).forEach((key) => {\n        innerYargs.option(key, commandHandler.builder[key])\n      })\n      innerArgv = innerYargs._parseArgs(null, null, true, commandIndex)\n      aliases = innerYargs.parsed.aliases\n    }\n\n    if (!yargs._hasOutput()) {\n      positionalMap = populatePositionals(commandHandler, innerArgv, currentContext, yargs)\n    }\n\n    const middlewares = globalMiddleware.slice(0).concat(commandHandler.middlewares || [])\n    applyMiddleware(innerArgv, yargs, middlewares, true)\n\n    // we apply validation post-hoc, so that custom\n    // checks get passed populated positional arguments.\n    if (!yargs._hasOutput()) yargs._runValidation(innerArgv, aliases, positionalMap, yargs.parsed.error)\n\n    if (commandHandler.handler && !yargs._hasOutput()) {\n      yargs._setHasOutput()\n      // to simplify the parsing of positionals in commands,\n      // we temporarily populate '--' rather than _, with arguments\n      const populateDoubleDash = !!yargs.getOptions().configuration['populate--']\n      if (!populateDoubleDash) yargs._copyDoubleDash(innerArgv)\n\n      innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false)\n      let handlerResult\n      if (isPromise(innerArgv)) {\n        handlerResult = innerArgv.then(argv => commandHandler.handler(argv))\n      } else {\n        handlerResult = commandHandler.handler(innerArgv)\n      }\n\n      if (isPromise(handlerResult)) {\n        yargs.getUsageInstance().cacheHelpMessage()\n        handlerResult.catch(error => {\n          try {\n            yargs.getUsageInstance().fail(null, error)\n          } catch (err) {\n            // fail's throwing would cause an unhandled rejection.\n          }\n        })\n      }\n    }\n\n    if (command) {\n      currentContext.commands.pop()\n      currentContext.fullCommands.pop()\n    }\n    numFiles = currentContext.files.length - numFiles\n    if (numFiles > 0) currentContext.files.splice(numFiles * -1, numFiles)\n\n    return innerArgv\n  }\n\n  function shouldUpdateUsage (yargs) {\n    return !yargs.getUsageInstance().getUsageDisabled() &&\n      yargs.getUsageInstance().getUsage().length === 0\n  }\n\n  function usageFromParentCommandsCommandHandler (parentCommands, commandHandler) {\n    const c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, '').trim() : commandHandler.original\n    const pc = parentCommands.filter((c) => { return !DEFAULT_MARKER.test(c) })\n    pc.push(c)\n    return `$0 ${pc.join(' ')}`\n  }\n\n  self.runDefaultBuilderOn = function (yargs) {\n    if (shouldUpdateUsage(yargs)) {\n      // build the root-level command string from the default string.\n      const commandString = DEFAULT_MARKER.test(defaultCommand.original)\n        ? defaultCommand.original : defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ')\n      yargs.getUsageInstance().usage(\n        commandString,\n        defaultCommand.description\n      )\n    }\n    const builder = defaultCommand.builder\n    if (typeof builder === 'function') {\n      builder(yargs)\n    } else {\n      Object.keys(builder).forEach((key) => {\n        yargs.option(key, builder[key])\n      })\n    }\n  }\n\n  // transcribe all positional arguments \"command <foo> <bar> [apple]\"\n  // onto argv.\n  function populatePositionals (commandHandler, argv, context, yargs) {\n    argv._ = argv._.slice(context.commands.length) // nuke the current commands\n    const demanded = commandHandler.demanded.slice(0)\n    const optional = commandHandler.optional.slice(0)\n    const positionalMap = {}\n\n    validation.positionalCount(demanded.length, argv._.length)\n\n    while (demanded.length) {\n      const demand = demanded.shift()\n      populatePositional(demand, argv, positionalMap)\n    }\n\n    while (optional.length) {\n      const maybe = optional.shift()\n      populatePositional(maybe, argv, positionalMap)\n    }\n\n    argv._ = context.commands.concat(argv._)\n\n    postProcessPositionals(argv, positionalMap, self.cmdToParseOptions(commandHandler.original))\n\n    return positionalMap\n  }\n\n  function populatePositional (positional, argv, positionalMap, parseOptions) {\n    const cmd = positional.cmd[0]\n    if (positional.variadic) {\n      positionalMap[cmd] = argv._.splice(0).map(String)\n    } else {\n      if (argv._.length) positionalMap[cmd] = [String(argv._.shift())]\n    }\n  }\n\n  // we run yargs-parser against the positional arguments\n  // applying the same parsing logic used for flags.\n  function postProcessPositionals (argv, positionalMap, parseOptions) {\n    // combine the parsing hints we've inferred from the command\n    // string with explicitly configured parsing hints.\n    const options = Object.assign({}, yargs.getOptions())\n    options.default = Object.assign(parseOptions.default, options.default)\n    options.alias = Object.assign(parseOptions.alias, options.alias)\n    options.array = options.array.concat(parseOptions.array)\n    delete options.config //  don't load config when processing positionals.\n\n    const unparsed = []\n    Object.keys(positionalMap).forEach((key) => {\n      positionalMap[key].map((value) => {\n        unparsed.push(`--${key}`)\n        unparsed.push(value)\n      })\n    })\n\n    // short-circuit parse.\n    if (!unparsed.length) return\n\n    const config = Object.assign({}, options.configuration, {\n      'populate--': true\n    })\n    const parsed = Parser.detailed(unparsed, Object.assign({}, options, {\n      configuration: config\n    }))\n\n    if (parsed.error) {\n      yargs.getUsageInstance().fail(parsed.error.message, parsed.error)\n    } else {\n      // only copy over positional keys (don't overwrite\n      // flag arguments that were already parsed).\n      const positionalKeys = Object.keys(positionalMap)\n      Object.keys(positionalMap).forEach((key) => {\n        [].push.apply(positionalKeys, parsed.aliases[key])\n      })\n\n      Object.keys(parsed.argv).forEach((key) => {\n        if (positionalKeys.indexOf(key) !== -1) {\n          // any new aliases need to be placed in positionalMap, which\n          // is used for validation.\n          if (!positionalMap[key]) positionalMap[key] = parsed.argv[key]\n          argv[key] = parsed.argv[key]\n        }\n      })\n    }\n  }\n\n  self.cmdToParseOptions = function (cmdString) {\n    const parseOptions = {\n      array: [],\n      default: {},\n      alias: {},\n      demand: {}\n    }\n\n    const parsed = self.parseCommand(cmdString)\n    parsed.demanded.forEach((d) => {\n      const cmds = d.cmd.slice(0)\n      const cmd = cmds.shift()\n      if (d.variadic) {\n        parseOptions.array.push(cmd)\n        parseOptions.default[cmd] = []\n      }\n      cmds.forEach((c) => {\n        parseOptions.alias[cmd] = c\n      })\n      parseOptions.demand[cmd] = true\n    })\n\n    parsed.optional.forEach((o) => {\n      const cmds = o.cmd.slice(0)\n      const cmd = cmds.shift()\n      if (o.variadic) {\n        parseOptions.array.push(cmd)\n        parseOptions.default[cmd] = []\n      }\n      cmds.forEach((c) => {\n        parseOptions.alias[cmd] = c\n      })\n    })\n\n    return parseOptions\n  }\n\n  self.reset = () => {\n    handlers = {}\n    aliasMap = {}\n    defaultCommand = undefined\n    return self\n  }\n\n  // used by yargs.parse() to freeze\n  // the state of commands such that\n  // we can apply .parse() multiple times\n  // with the same yargs instance.\n  let frozens = []\n  self.freeze = () => {\n    let frozen = {}\n    frozens.push(frozen)\n    frozen.handlers = handlers\n    frozen.aliasMap = aliasMap\n    frozen.defaultCommand = defaultCommand\n  }\n  self.unfreeze = () => {\n    let frozen = frozens.pop()\n    handlers = frozen.handlers\n    aliasMap = frozen.aliasMap\n    defaultCommand = frozen.defaultCommand\n  }\n\n  return self\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/yargs/lib/command.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/yargs/lib/command.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}}],"sources":{"node_modules/yargs/lib/command.js":"'use strict'\n\nconst inspect = require('util').inspect\nconst isPromise = require('./is-promise')\nconst { applyMiddleware, commandMiddlewareFactory } = require('./middleware')\nconst path = require('path')\nconst Parser = require('yargs-parser')\n\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/\n\n// handles parsing positional arguments,\n// and populating argv with said positional\n// arguments.\nmodule.exports = function command (yargs, usage, validation, globalMiddleware) {\n  const self = {}\n  let handlers = {}\n  let aliasMap = {}\n  let defaultCommand\n  globalMiddleware = globalMiddleware || []\n\n  self.addHandler = function addHandler (cmd, description, builder, handler, commandMiddleware) {\n    let aliases = []\n    const middlewares = commandMiddlewareFactory(commandMiddleware)\n    handler = handler || (() => {})\n\n    if (Array.isArray(cmd)) {\n      aliases = cmd.slice(1)\n      cmd = cmd[0]\n    } else if (typeof cmd === 'object') {\n      let command = (Array.isArray(cmd.command) || typeof cmd.command === 'string') ? cmd.command : moduleName(cmd)\n      if (cmd.aliases) command = [].concat(command).concat(cmd.aliases)\n      self.addHandler(command, extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares)\n      return\n    }\n\n    // allow a module to be provided instead of separate builder and handler\n    if (typeof builder === 'object' && builder.builder && typeof builder.handler === 'function') {\n      self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares)\n      return\n    }\n\n    // parse positionals out of cmd string\n    const parsedCommand = self.parseCommand(cmd)\n\n    // remove positional args from aliases only\n    aliases = aliases.map(alias => self.parseCommand(alias).cmd)\n\n    // check for default and filter out '*''\n    let isDefault = false\n    const parsedAliases = [parsedCommand.cmd].concat(aliases).filter((c) => {\n      if (DEFAULT_MARKER.test(c)) {\n        isDefault = true\n        return false\n      }\n      return true\n    })\n\n    // standardize on $0 for default command.\n    if (parsedAliases.length === 0 && isDefault) parsedAliases.push('$0')\n\n    // shift cmd and aliases after filtering out '*'\n    if (isDefault) {\n      parsedCommand.cmd = parsedAliases[0]\n      aliases = parsedAliases.slice(1)\n      cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd)\n    }\n\n    // populate aliasMap\n    aliases.forEach((alias) => {\n      aliasMap[alias] = parsedCommand.cmd\n    })\n\n    if (description !== false) {\n      usage.command(cmd, description, isDefault, aliases)\n    }\n\n    handlers[parsedCommand.cmd] = {\n      original: cmd,\n      description: description,\n      handler,\n      builder: builder || {},\n      middlewares: middlewares || [],\n      demanded: parsedCommand.demanded,\n      optional: parsedCommand.optional\n    }\n\n    if (isDefault) defaultCommand = handlers[parsedCommand.cmd]\n  }\n\n  self.addDirectory = function addDirectory (dir, context, req, callerFile, opts) {\n    opts = opts || {}\n    // disable recursion to support nested directories of subcommands\n    if (typeof opts.recurse !== 'boolean') opts.recurse = false\n    // exclude 'json', 'coffee' from require-directory defaults\n    if (!Array.isArray(opts.extensions)) opts.extensions = ['js']\n    // allow consumer to define their own visitor function\n    const parentVisit = typeof opts.visit === 'function' ? opts.visit : o => o\n    // call addHandler via visitor function\n    opts.visit = function visit (obj, joined, filename) {\n      const visited = parentVisit(obj, joined, filename)\n      // allow consumer to skip modules with their own visitor\n      if (visited) {\n        // check for cyclic reference\n        // each command file path should only be seen once per execution\n        if (~context.files.indexOf(joined)) return visited\n        // keep track of visited files in context.files\n        context.files.push(joined)\n        self.addHandler(visited)\n      }\n      return visited\n    }\n    require('require-directory')({ require: req, filename: callerFile }, dir, opts)\n  }\n\n  // lookup module object from require()d command and derive name\n  // if module was not require()d and no name given, throw error\n  function moduleName (obj) {\n    const mod = require('which-module')(obj)\n    if (!mod) throw new Error(`No command name given for module: ${inspect(obj)}`)\n    return commandFromFilename(mod.filename)\n  }\n\n  // derive command name from filename\n  function commandFromFilename (filename) {\n    return path.basename(filename, path.extname(filename))\n  }\n\n  function extractDesc (obj) {\n    for (let keys = ['describe', 'description', 'desc'], i = 0, l = keys.length, test; i < l; i++) {\n      test = obj[keys[i]]\n      if (typeof test === 'string' || typeof test === 'boolean') return test\n    }\n    return false\n  }\n\n  self.parseCommand = function parseCommand (cmd) {\n    const extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ')\n    const splitCommand = extraSpacesStrippedCommand.split(/\\s+(?![^[]*]|[^<]*>)/)\n    const bregex = /\\.*[\\][<>]/g\n    const parsedCommand = {\n      cmd: (splitCommand.shift()).replace(bregex, ''),\n      demanded: [],\n      optional: []\n    }\n    splitCommand.forEach((cmd, i) => {\n      let variadic = false\n      cmd = cmd.replace(/\\s/g, '')\n      if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1) variadic = true\n      if (/^\\[/.test(cmd)) {\n        parsedCommand.optional.push({\n          cmd: cmd.replace(bregex, '').split('|'),\n          variadic\n        })\n      } else {\n        parsedCommand.demanded.push({\n          cmd: cmd.replace(bregex, '').split('|'),\n          variadic\n        })\n      }\n    })\n    return parsedCommand\n  }\n\n  self.getCommands = () => Object.keys(handlers).concat(Object.keys(aliasMap))\n\n  self.getCommandHandlers = () => handlers\n\n  self.hasDefaultCommand = () => !!defaultCommand\n\n  self.runCommand = function runCommand (command, yargs, parsed, commandIndex) {\n    let aliases = parsed.aliases\n    const commandHandler = handlers[command] || handlers[aliasMap[command]] || defaultCommand\n    const currentContext = yargs.getContext()\n    let numFiles = currentContext.files.length\n    const parentCommands = currentContext.commands.slice()\n\n    // what does yargs look like after the builder is run?\n    let innerArgv = parsed.argv\n    let innerYargs = null\n    let positionalMap = {}\n    if (command) {\n      currentContext.commands.push(command)\n      currentContext.fullCommands.push(commandHandler.original)\n    }\n    if (typeof commandHandler.builder === 'function') {\n      // a function can be provided, which builds\n      // up a yargs chain and possibly returns it.\n      innerYargs = commandHandler.builder(yargs.reset(parsed.aliases))\n      if (!innerYargs || (typeof innerYargs._parseArgs !== 'function')) {\n        innerYargs = yargs\n      }\n      if (shouldUpdateUsage(innerYargs)) {\n        innerYargs.getUsageInstance().usage(\n          usageFromParentCommandsCommandHandler(parentCommands, commandHandler),\n          commandHandler.description\n        )\n      }\n      innerArgv = innerYargs._parseArgs(null, null, true, commandIndex)\n      aliases = innerYargs.parsed.aliases\n    } else if (typeof commandHandler.builder === 'object') {\n      // as a short hand, an object can instead be provided, specifying\n      // the options that a command takes.\n      innerYargs = yargs.reset(parsed.aliases)\n      if (shouldUpdateUsage(innerYargs)) {\n        innerYargs.getUsageInstance().usage(\n          usageFromParentCommandsCommandHandler(parentCommands, commandHandler),\n          commandHandler.description\n        )\n      }\n      Object.keys(commandHandler.builder).forEach((key) => {\n        innerYargs.option(key, commandHandler.builder[key])\n      })\n      innerArgv = innerYargs._parseArgs(null, null, true, commandIndex)\n      aliases = innerYargs.parsed.aliases\n    }\n\n    if (!yargs._hasOutput()) {\n      positionalMap = populatePositionals(commandHandler, innerArgv, currentContext, yargs)\n    }\n\n    const middlewares = globalMiddleware.slice(0).concat(commandHandler.middlewares || [])\n    applyMiddleware(innerArgv, yargs, middlewares, true)\n\n    // we apply validation post-hoc, so that custom\n    // checks get passed populated positional arguments.\n    if (!yargs._hasOutput()) yargs._runValidation(innerArgv, aliases, positionalMap, yargs.parsed.error)\n\n    if (commandHandler.handler && !yargs._hasOutput()) {\n      yargs._setHasOutput()\n      // to simplify the parsing of positionals in commands,\n      // we temporarily populate '--' rather than _, with arguments\n      const populateDoubleDash = !!yargs.getOptions().configuration['populate--']\n      if (!populateDoubleDash) yargs._copyDoubleDash(innerArgv)\n\n      innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false)\n      let handlerResult\n      if (isPromise(innerArgv)) {\n        handlerResult = innerArgv.then(argv => commandHandler.handler(argv))\n      } else {\n        handlerResult = commandHandler.handler(innerArgv)\n      }\n\n      if (isPromise(handlerResult)) {\n        yargs.getUsageInstance().cacheHelpMessage()\n        handlerResult.catch(error => {\n          try {\n            yargs.getUsageInstance().fail(null, error)\n          } catch (err) {\n            // fail's throwing would cause an unhandled rejection.\n          }\n        })\n      }\n    }\n\n    if (command) {\n      currentContext.commands.pop()\n      currentContext.fullCommands.pop()\n    }\n    numFiles = currentContext.files.length - numFiles\n    if (numFiles > 0) currentContext.files.splice(numFiles * -1, numFiles)\n\n    return innerArgv\n  }\n\n  function shouldUpdateUsage (yargs) {\n    return !yargs.getUsageInstance().getUsageDisabled() &&\n      yargs.getUsageInstance().getUsage().length === 0\n  }\n\n  function usageFromParentCommandsCommandHandler (parentCommands, commandHandler) {\n    const c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, '').trim() : commandHandler.original\n    const pc = parentCommands.filter((c) => { return !DEFAULT_MARKER.test(c) })\n    pc.push(c)\n    return `$0 ${pc.join(' ')}`\n  }\n\n  self.runDefaultBuilderOn = function (yargs) {\n    if (shouldUpdateUsage(yargs)) {\n      // build the root-level command string from the default string.\n      const commandString = DEFAULT_MARKER.test(defaultCommand.original)\n        ? defaultCommand.original : defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ')\n      yargs.getUsageInstance().usage(\n        commandString,\n        defaultCommand.description\n      )\n    }\n    const builder = defaultCommand.builder\n    if (typeof builder === 'function') {\n      builder(yargs)\n    } else {\n      Object.keys(builder).forEach((key) => {\n        yargs.option(key, builder[key])\n      })\n    }\n  }\n\n  // transcribe all positional arguments \"command <foo> <bar> [apple]\"\n  // onto argv.\n  function populatePositionals (commandHandler, argv, context, yargs) {\n    argv._ = argv._.slice(context.commands.length) // nuke the current commands\n    const demanded = commandHandler.demanded.slice(0)\n    const optional = commandHandler.optional.slice(0)\n    const positionalMap = {}\n\n    validation.positionalCount(demanded.length, argv._.length)\n\n    while (demanded.length) {\n      const demand = demanded.shift()\n      populatePositional(demand, argv, positionalMap)\n    }\n\n    while (optional.length) {\n      const maybe = optional.shift()\n      populatePositional(maybe, argv, positionalMap)\n    }\n\n    argv._ = context.commands.concat(argv._)\n\n    postProcessPositionals(argv, positionalMap, self.cmdToParseOptions(commandHandler.original))\n\n    return positionalMap\n  }\n\n  function populatePositional (positional, argv, positionalMap, parseOptions) {\n    const cmd = positional.cmd[0]\n    if (positional.variadic) {\n      positionalMap[cmd] = argv._.splice(0).map(String)\n    } else {\n      if (argv._.length) positionalMap[cmd] = [String(argv._.shift())]\n    }\n  }\n\n  // we run yargs-parser against the positional arguments\n  // applying the same parsing logic used for flags.\n  function postProcessPositionals (argv, positionalMap, parseOptions) {\n    // combine the parsing hints we've inferred from the command\n    // string with explicitly configured parsing hints.\n    const options = Object.assign({}, yargs.getOptions())\n    options.default = Object.assign(parseOptions.default, options.default)\n    options.alias = Object.assign(parseOptions.alias, options.alias)\n    options.array = options.array.concat(parseOptions.array)\n    delete options.config //  don't load config when processing positionals.\n\n    const unparsed = []\n    Object.keys(positionalMap).forEach((key) => {\n      positionalMap[key].map((value) => {\n        unparsed.push(`--${key}`)\n        unparsed.push(value)\n      })\n    })\n\n    // short-circuit parse.\n    if (!unparsed.length) return\n\n    const config = Object.assign({}, options.configuration, {\n      'populate--': true\n    })\n    const parsed = Parser.detailed(unparsed, Object.assign({}, options, {\n      configuration: config\n    }))\n\n    if (parsed.error) {\n      yargs.getUsageInstance().fail(parsed.error.message, parsed.error)\n    } else {\n      // only copy over positional keys (don't overwrite\n      // flag arguments that were already parsed).\n      const positionalKeys = Object.keys(positionalMap)\n      Object.keys(positionalMap).forEach((key) => {\n        [].push.apply(positionalKeys, parsed.aliases[key])\n      })\n\n      Object.keys(parsed.argv).forEach((key) => {\n        if (positionalKeys.indexOf(key) !== -1) {\n          // any new aliases need to be placed in positionalMap, which\n          // is used for validation.\n          if (!positionalMap[key]) positionalMap[key] = parsed.argv[key]\n          argv[key] = parsed.argv[key]\n        }\n      })\n    }\n  }\n\n  self.cmdToParseOptions = function (cmdString) {\n    const parseOptions = {\n      array: [],\n      default: {},\n      alias: {},\n      demand: {}\n    }\n\n    const parsed = self.parseCommand(cmdString)\n    parsed.demanded.forEach((d) => {\n      const cmds = d.cmd.slice(0)\n      const cmd = cmds.shift()\n      if (d.variadic) {\n        parseOptions.array.push(cmd)\n        parseOptions.default[cmd] = []\n      }\n      cmds.forEach((c) => {\n        parseOptions.alias[cmd] = c\n      })\n      parseOptions.demand[cmd] = true\n    })\n\n    parsed.optional.forEach((o) => {\n      const cmds = o.cmd.slice(0)\n      const cmd = cmds.shift()\n      if (o.variadic) {\n        parseOptions.array.push(cmd)\n        parseOptions.default[cmd] = []\n      }\n      cmds.forEach((c) => {\n        parseOptions.alias[cmd] = c\n      })\n    })\n\n    return parseOptions\n  }\n\n  self.reset = () => {\n    handlers = {}\n    aliasMap = {}\n    defaultCommand = undefined\n    return self\n  }\n\n  // used by yargs.parse() to freeze\n  // the state of commands such that\n  // we can apply .parse() multiple times\n  // with the same yargs instance.\n  let frozens = []\n  self.freeze = () => {\n    let frozen = {}\n    frozens.push(frozen)\n    frozen.handlers = handlers\n    frozen.aliasMap = aliasMap\n    frozen.defaultCommand = defaultCommand\n  }\n  self.unfreeze = () => {\n    let frozen = frozens.pop()\n    handlers = frozen.handlers\n    aliasMap = frozen.aliasMap\n    defaultCommand = frozen.defaultCommand\n  }\n\n  return self\n}\n"},"lineCount":448}},"error":null,"hash":"88f457acf50503f4d94e0b46d580d36d","cacheData":{"env":{}}}