{"id":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","dependencies":[{"name":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/package.json","includedInParent":true,"mtime":1583765270259},{"name":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/libp2p-utils/package.json","includedInParent":true,"mtime":1581949149916},{"name":"multiaddr","loc":{"line":3,"column":26},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/multiaddr/src/index.js"},{"name":"err-code","loc":{"line":4,"column":24},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/libp2p-utils/node_modules/err-code/index.js"},{"name":"ip-address","loc":{"line":5,"column":39},"parent":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","resolved":"/home/hamster/Learning/Node.js/js-libp2p/examples/libp2p-in-the-browser2/node_modules/ip-address/ip-address.js"}],"generated":{"js":"'use strict'\n\nconst multiaddr = require('multiaddr')\nconst errCode = require('err-code')\nconst { Address4, Address6 } = require('ip-address')\n\nconst errors = {\n  ERR_INVALID_IP_PARAMETER: 'ERR_INVALID_IP_PARAMETER',\n  ERR_INVALID_PORT_PARAMETER: 'ERR_INVALID_PORT_PARAMETER',\n  ERR_INVALID_IP: 'ERR_INVALID_IP'\n}\n\nmodule.exports = (ip, port) => {\n  if (typeof ip !== 'string') {\n    throw errCode(new Error(`invalid ip provided: ${ip}`), errors.ERR_INVALID_IP_PARAMETER)\n  }\n\n  port = parseInt(port)\n\n  if (isNaN(port)) {\n    throw errCode(new Error(`invalid port provided: ${port}`), errors.ERR_INVALID_PORT_PARAMETER)\n  }\n\n  if (new Address4(ip).isValid()) {\n    return multiaddr(`/ip4/${ip}/tcp/${port}`)\n  }\n\n  const ip6 = new Address6(ip)\n\n  if (ip6.isValid()) {\n    return ip6.is4()\n      ? multiaddr(`/ip4/${ip6.to4().correctForm()}/tcp/${port}`)\n      : multiaddr(`/ip6/${ip}/tcp/${port}`)\n  }\n\n  throw errCode(new Error(`invalid ip:port for creating a multiaddr: ${ip}:${port}`), errors.ERR_INVALID_IP)\n}\n\nmodule.exports.Errors = errors\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"node_modules/libp2p-utils/src/ip-port-to-multiaddr.js":"'use strict'\n\nconst multiaddr = require('multiaddr')\nconst errCode = require('err-code')\nconst { Address4, Address6 } = require('ip-address')\n\nconst errors = {\n  ERR_INVALID_IP_PARAMETER: 'ERR_INVALID_IP_PARAMETER',\n  ERR_INVALID_PORT_PARAMETER: 'ERR_INVALID_PORT_PARAMETER',\n  ERR_INVALID_IP: 'ERR_INVALID_IP'\n}\n\nmodule.exports = (ip, port) => {\n  if (typeof ip !== 'string') {\n    throw errCode(new Error(`invalid ip provided: ${ip}`), errors.ERR_INVALID_IP_PARAMETER)\n  }\n\n  port = parseInt(port)\n\n  if (isNaN(port)) {\n    throw errCode(new Error(`invalid port provided: ${port}`), errors.ERR_INVALID_PORT_PARAMETER)\n  }\n\n  if (new Address4(ip).isValid()) {\n    return multiaddr(`/ip4/${ip}/tcp/${port}`)\n  }\n\n  const ip6 = new Address6(ip)\n\n  if (ip6.isValid()) {\n    return ip6.is4()\n      ? multiaddr(`/ip4/${ip6.to4().correctForm()}/tcp/${port}`)\n      : multiaddr(`/ip6/${ip}/tcp/${port}`)\n  }\n\n  throw errCode(new Error(`invalid ip:port for creating a multiaddr: ${ip}:${port}`), errors.ERR_INVALID_IP)\n}\n\nmodule.exports.Errors = errors\n"},"lineCount":40}},"error":null,"hash":"10cbc8f4db5aa2ab8a348633d6aef86f","cacheData":{"env":{}}}