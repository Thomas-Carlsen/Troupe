(* Universal declassifier                       *) 
(* Author: Aslan Askarov, aslan@askarov.net     *)
(* Creation date: 2018-10-19                    *)

import lists

let 
    (* these are our primitive declassifiers; obs: mutual recursion *)
    
    fun declassify2 ((x,y), a, lev)   = ( declassifydeep (x, a, lev)
                                        , declassifydeep (y, a, lev))

    and declassify3 ((x,y,z), a, lev) = ( declassifydeep (x, a, lev)
                                        , declassifydeep (y, a, lev)
                                        , declassifydeep (z, a, lev))

    and declassify4 ((x,y,z,w), a, lev) = ( declassifydeep (x, a, lev)
                                          , declassifydeep (y, a, lev)
                                          , declassifydeep (z, a, lev)
                                          , declassifydeep (w, a, lev))

    and declassifylist (xs, a, lev) = 
        map (fn x => declassifydeep (x, a, lev) ) xs
    
    and declassifydeep (x, a, lev)  = 
      (* declassification is a 2-step process ; first we pattern match *) 
      (* on the given value and figure out which function to apply;    *) 
      (* the choice of the function needs to be declassified before we *)
      (* proceed further with the application of that function         *)
      let val y = declassify (x, a, lev)
          val f =  
            case y of 
                (_,_) => declassify2 
              | (_,_,_) => declassify3
              | (_,_,_,_) => declassify4
              | (_::_) => declassifylist 
              | _ => declassify
      in f(y, a, lev )
      end      

in [("declassifydeep", declassifydeep)]
end
