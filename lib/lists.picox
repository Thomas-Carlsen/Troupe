let fun map f list =
    case list of
       [] => []
      |  (x::xs) => (f x) :: (map f xs)

    fun foldl f y [] = y
      | foldl f y (x::xs) = foldl f (f (x,y)) xs

    fun add (x, y) = x + y


    fun reverse ls =
      let fun rev [] a = a
            | rev (x::xs) a = rev xs (x::a)

      in rev ls []
      end

    fun range n =
     let fun rng 0 = []
          |  rng k = k :: (rng (k-1))
      in reverse (rng n)
     end


    fun lookup list key default =
      case list of [] => default
                 | ((x, v):: xs) =>
                   if x = key then v
                   else lookup xs key default

    fun elem x [] = false 
      | elem x (y::ys) = if x = y then true else elem x ys

in
    [ ("map",     map)
    , ("foldl",   foldl)
    , ("range",   range)
    , ("reverse", reverse)
    , ("lookup",  lookup) 
    , ("elem",    elem)
    ]
end
