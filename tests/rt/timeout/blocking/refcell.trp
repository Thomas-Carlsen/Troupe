datatype Atoms = WRITE | READ | VALUE

let val receive = fn h =>                
            let val _ = raisembox ({secret}) 
            in rcv ({}, {secret}, h) 
            end 

    fun cell content = 
    let val _ = raisembox ({secret}) (* we never lower the mbox clearance here *)
        fun loop content =
            rcv ({}
                ,{secret}
                ,[ hn ( WRITE, newcontent ) => loop newcontent 
                    , hn ( READ, reader) =>  
                            let val _ = send (reader, (VALUE, content))
                            in loop content 
                            end 
                    ])
    in loop content                 
    end                

    fun read c = 
        let val _ = send ( c ,  (READ, self()))
        in receive [ hn ( VALUE, x) => x]
        end

    fun write c x = send (c, ( WRITE, x))

    val initValue = 42

    val x = spawn (fn () => cell initValue )
         
    val _ = printWithLabels ( read x )    
    (* prints 42@{secret}%{secret} *)

    val c = pinipush authority
    val _ = if (100 raisedTo {secret} > 0) then write x 2 else ()

    (* The above line taints the PC of the cell process *)
    (* It also taints the PC of the current process but we lower it later via pinpop *)

    val _ = write x 20     
    val _ = printWithLabels ( read x ) 

    (* prints 20@{secret}%{secret} *)

    val _ = pinipop c
    
    val _ = write x 10     
    val _ = printWithLabels ( read x )

    (* prints 10@{secret}%{secret} *)
        
in ()
end    
         

