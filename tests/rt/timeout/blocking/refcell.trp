datatype Atoms = WRITE | READ | VALUE


let val receive = fn h => rcv ({}, {secret}, authority, h) 
    fun cell content = 
    let val _ =  () 
        (* printWithLabels "cell" *)
    in
        receive [ hn ( WRITE, newcontent ) => cell newcontent                                                          
                , hn ( READ, reader) =>  
                        let val _ = send (reader, (VALUE, content))
                        in cell content 
                        end 
                ]
    end                

    fun read c = 
        let val _ = send ( c ,  (READ, self()))
        in receive [ hn ( VALUE, x) => x]
        end

    fun write c x = send (c, ( WRITE, x))

    val initValue = 42

    val x = spawn (fn () => cell initValue )
         
    val _ = printWithLabels ( read x )    
    (* printWithLabelss 42 *)

    val c = pinipush authority
    val _ = if (100 raisedTo {secret} > 0) then write x 2 else ()

    (* The above line taints the PC of the cell process *)
    (* It also taints the PC of the current process but we lower it later via pinpop *)

    val _ = write x 20     
    val _ = printWithLabels ( read x ) 

    (* printWithLabelss 20@{secret} *)

    val _ = pinipop c
    
    (* From now on the READ messages are not picked up by the cell process because the process' PC is high *)
    (* that prevents it from picking up messages that are sent when the PC is low                        *)

    val _ = write x 10     
    val _ = printWithLabels ( read x )

    (* After the previous line this process is blocked because we never receive the VALUE response *) 
in ()
end    
         

